import { beforeAll, describe, expect, it } from "vitest";
import {
	AccountWallet,
	AztecAddress,
	createPXEClient,
	Fq,
	Fr,
	type PXE,
} from "@aztec/aztec.js";
import { TokenContract } from "@aztec/noir-contracts.js/Token";
import { getSchnorrAccount } from "@aztec/accounts/schnorr";
import { GasSettings } from "@aztec/stdlib/gas";
import { getSponsoredFeePaymentMethod } from "./fees/sponsored_feepayment_method.js";
import { getSponsoredFPCAddress } from "./fees/sponsored_fpc.js";
import { AutomatorClient, type AutomatorJob } from "../src/index.js";

const PXE_URL = "http://localhost:8080";
//const AUTOMATOR_URL = "http://localhost:3000";
const AUTOMATOR_URL =
	"https://36c3486d890878aa7f6bbf9aeb6fbba91c22e7de-3000.dstack-prod8.phala.network";

let pxe: PXE; // should be a diff pxe from the one used for automator
let account: AccountWallet;
let accountSecretKey: Fr;
let accountSigningKey: Fq;
let recipient: AccountWallet;
let recipientSecretKey: Fr;
let recipientSigningKey: Fq;
let tokenAddress: AztecAddress;

beforeAll(async () => {
	pxe = createPXEClient(PXE_URL);

	accountSecretKey = Fr.random();
	accountSigningKey = Fq.random();
	recipientSecretKey = Fr.random();
	recipientSigningKey = Fq.random();

	const [_account, _recipient] = await Promise.all([
		(await (
			await getSchnorrAccount(pxe, accountSecretKey, accountSigningKey)
		)
			.deploy({
				fee: await getFee(pxe),
				skipPublicDeployment: false,
			})
			.getWallet()) as AccountWallet,
		(await (
			await getSchnorrAccount(pxe, recipientSecretKey, recipientSigningKey)
		)
			.deploy({
				fee: await getFee(pxe),
				skipPublicDeployment: false,
			})
			.getWallet()) as AccountWallet,
	]);

	account = _account;
	recipient = _recipient;

	console.log("Account deployed:", account.getAddress().toString());
	console.log("Recipient deployed:", recipient.getAddress().toString());

	const deployReceipt = await TokenContract.deployWithOpts(
		{
			wallet: account,
		},
		account.getAddress(),
		"Test Token",
		"TT",
		9
	)
		.send({
			fee: await getFee(pxe),
		})
		.wait();

	tokenAddress = deployReceipt.contract.address;
	console.log("Token deployed:", tokenAddress.toString());

	const tokenContract = deployReceipt.contract;

	await tokenContract.methods
		.mint_to_private(account.getAddress(), account.getAddress(), 100e9)
		.send({
			fee: await getFee(pxe),
		})
		.wait();
}, 200000);

describe("Automation", () => {
	it("should create a send request to the automator", async () => {
		const txRequest = await getTokenTransferTxRequest(
			account,
			tokenAddress,
			recipient.getAddress(),
			1e9
		);

		// Get account details for the automator
		const accountDetails = {
			address: account.getAddress().toString(),
			secretKey: accountSecretKey.toString(),
			signingKey: accountSigningKey.toString(),
		};

		// Schedule the first transaction to run in 1 minute, every 2 minutes for 10 minutes
		const now = new Date();
		const schedule = {
			start: new Date(now.getTime() + 5000), // 5 seconds from now
			end: new Date(now.getTime() + 300000), // 5 minutes from now
			interval: 30000, // 30 seconds in milliseconds
		};

		const job: AutomatorJob = {
			id: "", // Will be generated by the service
			txRequestStr: txRequest.toString(),
			account: accountDetails,
			contractAddresses: [
				tokenAddress.toString(),
				(await getSponsoredFPCAddress()).toString(),
			],
			schedule,
			status: "pending",
		};

		// Use AutomatorClient to send the job request
		const automatorClient = new AutomatorClient(AUTOMATOR_URL);
		const result = await automatorClient.sendJobRequest(job);

		// Verify responses
		expect(result.message).toBe("Job registered successfully");
		expect(result.jobId).toBeDefined();
		expect(result.scheduledExecutions).toBeGreaterThan(0);

		console.log(
			"Job registered with ID:",
			result.jobId,
			"scheduled executions:",
			result.scheduledExecutions
		);

		// Verify jobs are in the automator's schedule
		const jobsResponse = await fetch(`${AUTOMATOR_URL}/jobs`);
		expect(jobsResponse.status).toBe(200);

		const jobs = await jobsResponse.json();
		expect(jobs.total).toBeGreaterThanOrEqual(result.scheduledExecutions);

		// Verify specific job details
		const jobDetails = await fetch(`${AUTOMATOR_URL}/jobs/${result.jobId}`);
		expect(jobDetails.status).toBe(200);

		const jobData = await jobDetails.json();
		expect(jobData.id).toBe(result.jobId);
		expect(jobData.contractAddresses[0]).toBe(tokenAddress.toString());
		expect(jobData.contractAddresses[1]).toBe(
			(await getSponsoredFPCAddress()).toString()
		);
		expect(jobData.executions.length).toBe(result.scheduledExecutions);
	}, 200000);
});

const getTokenTransferTxRequest = async (
	account: AccountWallet,
	tokenAddress: AztecAddress,
	recipient: AztecAddress,
	amount: number
) => {
	const tokenContract = await TokenContract.at(tokenAddress, account);
	const request = await tokenContract.methods
		.transfer_in_private(account.getAddress(), recipient, amount, 0)
		.create({
			fee: await getFee(pxe),
		});

	return request;
};

const getFee = async (pxe: PXE) => {
	return {
		paymentMethod: await getSponsoredFeePaymentMethod(pxe),
		gasSettings: GasSettings.default({
			maxFeesPerGas: await pxe.getCurrentBaseFees(),
		}),
	};
};
